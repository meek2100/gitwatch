---
name: Gitwatch QA

on:
  push:
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions: {}

jobs:
  #-------------------------------------------------------------------------
  bats:
    name: BATS Tests
    if: "! contains(github.event.head_commit.message, '#noaction')"
    permissions:
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          # Submodules are no longer needed
          fetch-depth: 0
          persist-credentials: false

      # NEW: Install BATS and its core helpers using the action.
      # We install them into the workspace for cache support and accessibility.
      - name: Setup BATS and Libraries
        id: setup-bats
        uses: bats-core/bats-action@42fcc8700f773c075a16a90eb11674c0318ad507
        with:
          # Explicitly set paths inside the workspace for caching and clear paths for BATS_LIB_PATH
          support-path: "${{ github.workspace }}/tests/bats-support"
          assert-path: "${{ github.workspace }}/tests/bats-assert"
          file-path: "${{ github.workspace }}/tests/bats-file"
          # Disable bats-detik which is not used in this project
          detik-install: "false"

      - name: Install gitwatch OS dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get -y install inotify-tools util-linux
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install fswatch flock bash
          else
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
          fi

      - name: Substitute Version Number into gitwatch.sh
        shell: bash
        run: |
          VERSION_NUMBER=$(cat VERSION)
          sed -i '' "s/%%GITWATCH_VERSION%%/${VERSION_NUMBER}/g" gitwatch.sh
          echo "Substituted version ${VERSION_NUMBER} into gitwatch.sh for testing."

      # - name: Setup upterm session # Preserved commented-out step
      #   uses: lhotari/action-upterm@v1

      - name: Display gitwatch.sh content before testing
        shell: bash
        run: |
          echo "--- Displaying gitwatch.sh from $(pwd) ---"
          cat gitwatch.sh
          echo "--- End of gitwatch.sh ---"

      - name: Verify script content before test
        shell: bash
        run: |
          echo "--- Verifying gitwatch.sh content ---"
          # Verify the git write-tree check
          grep -C 3 'if \[ "$staged_tree_hash" = "$head_tree_hash" \];' gitwatch.sh
          echo "--- Verifying debounce logic (PID File Method) ---"
          # Verify the start of the new debounce logic block using the PID file
          grep -C 3 'if \[ -f "$TIMER_PID_FILE" \];' gitwatch.sh
          echo "--- End of verification ---"

      - name: Run tests in parallel
        shell: bash
        # Set BATS_LIB_PATH to include action-installed libraries and our custom module
        env:
          BATS_LIB_PATH: "${{ steps.setup-bats.outputs.lib-path }}:${{ github.workspace }}/tests"
        run: |
          git config --global user.email "test@email.com"
          git config --global user.name "test user"

          cd tests

          # Get the number of available processor cores
          NPROC=1
          if [ "$RUNNER_OS" == "Linux" ]; then
            NPROC=$(nproc)
          elif [ "$RUNNER_OS" == "macOS" ]; then
            NPROC=$(sysctl -n hw.ncpu)
          fi

          echo "Running BATS tests in parallel using $NPROC cores..."

          # Use find and xargs to pipe test files to bats
          # -n1: one file at a time per bats process
          # -P $NPROC: run up to $NPROC processes in parallel
          # We add --tap to get a standard output format, which is good for parallel runs
          # Add the new helpers.bats test to the parallel run
          find . -name "*.bats" -print0 | xargs -0 -n1 -P "$NPROC" bats --tap

          echo "Finished running tests"
