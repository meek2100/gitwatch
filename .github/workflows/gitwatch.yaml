---
name: Gitwatch QA

on:
  push:
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions: {}

jobs:
  #-------------------------------------------------------------------------
  super-lint:
    name: Lint Code Base
    if: "! contains(github.event.head_commit.message, '#noaction')"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      statuses: write
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Lint Code Base
        uses: super-linter/super-linter@2bdd90ed3262e023ac84bf8fe35dc480721fc1f2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: .
          FILTER_REGEX_EXCLUDE: (^|/)tests/|^\.editorconfig$
          # Disable potentially conflicting linters/formatters
          VALIDATE_PRETTIER: false
          VALIDATE_JAVASCRIPT_ES: false
          VALIDATE_TYPESCRIPT_ES: false
          VALIDATE_CSS: false
          VALIDATE_JSON: false
          VALIDATE_JSONC: false
          VALIDATE_JSX: false
          VALIDATE_TSX: false
          VALIDATE_VUE: false
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_PYTHON_ISORT: false
          VALIDATE_PYTHON_FLAKE8: false
          VALIDATE_PYTHON_PYLINT: false
          VALIDATE_SHELL_SHFMT: false # Explicitly disable shfmt due to panic

  #-------------------------------------------------------------------------
  bats:
    name: BATS Tests
    if: "! contains(github.event.head_commit.message, '#noaction')"
    permissions:
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          # Submodules are no longer needed
          fetch-depth: 0
          persist-credentials: false

      # NEW: Install BATS and its core helpers using the action.
      # We install them into the workspace for cache support and accessibility.
      - name: Setup BATS and Libraries
        id: setup-bats
        uses: bats-core/bats-action@42fcc8700f773c075a16a90eb11674c0318ad507
        with:
          # Explicitly set paths inside the workspace for caching
          support-path: "${{ github.workspace }}/tests/bats-support"
          assert-path: "${{ github.workspace }}/tests/bats-assert"
          file-path: "${{ github.workspace }}/tests/bats-file"
          # Disable bats-detik which is not used in this project
          detik-install: "false"

      - name: Install gitwatch OS dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get -y install inotify-tools util-linux
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install fswatch flock bash
          else
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
          fi

      - name: Substitute Version Number into gitwatch.sh
        shell: bash
        run: |
          VERSION_NUMBER=$(cat VERSION)
          sed -i "s/%%GITWATCH_VERSION%%/${VERSION_NUMBER}/g" gitwatch.sh
          echo "Substituted version ${VERSION_NUMBER} into gitwatch.sh for testing."

      # - name: Setup upterm session # Preserved commented-out step
      #   uses: lhotari/action-upterm@v1

      - name: Display gitwatch.sh content before testing
        shell: bash
        run: |
          echo "--- Displaying gitwatch.sh from $(pwd) ---"
          cat gitwatch.sh
          echo "--- End of gitwatch.sh ---"

      - name: Verify script content before test
        shell: bash
        run: |
          echo "--- Verifying gitwatch.sh content ---"
          # Verify the git write-tree check
          grep -C 3 'if \[ "$staged_tree_hash" = "$head_tree_hash" \];' gitwatch.sh
          echo "--- Verifying debounce logic (PID File Method) ---"
          # Verify the start of the new debounce logic block using the PID file
          grep -C 3 'if \[ -f "$TIMER_PID_FILE" \];' gitwatch.sh
          echo "--- End of verification ---"

      - name: Run tests individually
        shell: bash
        # We set BATS_LIB_PATH to include both the action-installed path AND our custom module path.
        # The action's default output path includes the action-installed libraries.
        # We append the relative path to our new custom module.
        env:
          BATS_LIB_PATH: "${{ steps.setup-bats.outputs.lib-path }}:${{ github.workspace }}/tests"
        run: |
          git config --global user.email "test@email.com"
          git config --global user.name "test user"

          cd tests

          echo "Running commitcmd.bats..."
          bats commitcmd.bats
          echo "Running commitlog.bats..."
          bats commitlog.bats
          echo "Running notify-ignore.bats..."
          bats notify-ignore.bats
          echo "Running pull-rebase.bats..."
          bats pull-rebase.bats
          echo "Running remotedirs.bats..."
          bats remotedirs.bats
          echo "Running spaces.bats..."
          bats spaces.bats
          echo "Running sync.bats..."
          bats sync.bats
          echo "Running status-change.bats..."
          bats status-change.bats
          echo "Running hook-failure.bats..."
          bats hook-failure.bats
          echo "Running startup-options.bats..."
          bats startup-options.bats
          echo "Running syslog.bats..."
          bats syslog.bats
          echo "Running custom-bins.bats..."
          bats custom-bins.bats
          echo "Running entrypoint-regex.bats..."
          bats entrypoint-regex.bats
          echo "Running bash-compatibility.bats..."
          bats bash-compatibility.bats
          echo "Running lockfile-fallback.bats..."
          bats lockfile-fallback.bats
          echo "Running perm-check.bats..."
          bats perm-check.bats
          echo "Running skip-merging.bats..."
          bats skip-merging.bats
          echo "Running target-deletion.bats..."
          bats target-deletion.bats
          echo "Running timeout.bats..."
          bats timeout.bats
          echo "Running diff-lines.bats..."
          bats diff-lines.bats
          echo "Running dependency-failure.bats..."
          bats dependency-failure.bats
          echo "Running debounce.bats..."
          bats debounce.bats
          echo "Finished running tests"
