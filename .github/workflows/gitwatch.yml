---
name: Gitwatch QA

on:
  push:
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  #-------------------------------------------------------------------------
  super-lint:
    name: Lint Code Base
    if: "! contains(github.event.head_commit.message, '#noaction')"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      # Required to report GitHub Actions status checks
      statuses: write
    steps:
      - name: Checkout code
        # Use the new Super-Linter action path and latest version
        uses: actions/checkout@v5
        with:
          # Super-Linter needs the full git history
          fetch-depth: 0
          persist-credentials: false

      - name: Lint Code Base
        # Use the new Super-Linter action path and latest version
        uses: super-linter/super-linter@v8.2.1 # x-release-please-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Exclude the tests/ directory and the problematic symlink
          # based on your previous comments.
          FILTER_REGEX_EXCLUDE: (^|/)tests/|^\.github/linters/\.markdown-lint\.yml$

  #-------------------------------------------------------------------------
  bats:
    name: BATS Tests
    if: "! contains(github.event.head_commit.message, '#noaction')"
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5

    steps:
      # Node setup
      - name: Setup node
        uses: actions/setup-node@v4

      # BATS install via npm
      - name: Setup BATS (bats-core via npm)
        run: sudo npm install -g bats # This should install bats-core

      - name: Install gitwatch dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get -y update
            sudo apt-get -y install inotify-tools util-linux
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install fswatch flock bash
          else
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Explicitly set submodules: true (or recursive if needed)
          # to ensure they are checked out along with the main repo.
          submodules: true
          fetch-depth: 0

      # - name: Setup upterm session # Preserved commented-out step
      #   uses: lhotari/action-upterm@v1

      - name: Run tests individually
        shell: bash
        run: |
          git config --global user.email "test@email.com"
          git config --global user.name "test user"

          cd tests

          # Tests should now load helpers from the relative paths
          echo "Running commitcmd.bats..."
          bats commitcmd.bats
          echo "Running commitlog.bats..."
          bats commitlog.bats
          echo "Running notify-ignore.bats..."
          bats notify-ignore.bats
          echo "Running pull-rebase.bats..."
          bats pull-rebase.bats
          echo "Running remotedirs.bats..."
          bats remotedirs.bats
          echo "Running spaces.bats..."
          bats spaces.bats
          echo "Running status-change.bats..."
          bats status-change.bats
          echo "Running sync.bats..."
          bats sync.bats
          echo "Finished running tests"
