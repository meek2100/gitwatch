---
name: Create Release and Update Files

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The new version number (e.g., 0.7.0)"
        required: true

permissions:
  contents: write # Needed to push branches, tags, and commits
  pull-requests: write # Needed to create a pull request

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          # Use a token with write permissions
          token: ${{ secrets.GITHUB_TOKEN }}
          # Fetch all history to enable comparing tags
          fetch-depth: 0

      - name: Configure Git User
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Get Version Numbers
        id: get_version
        run: |
          VERSION_NUMBER=${{ github.event.inputs.version }}
          TAG_NAME="v${VERSION_NUMBER}"
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION_NUMBER}" >> $GITHUB_OUTPUT
          echo "release_branch=release/${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Create Release Branch
        run: |
          git checkout -b ${{ steps.get_version.outputs.release_branch }} master

      - name: Update VERSION file
        run: |
          echo "${{ steps.get_version.outputs.version_number }}" > VERSION

      - name: Update package.json
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          jq --arg new_version "${{ steps.get_version.outputs.version_number }}" '.version = $new_version' package.json > temp.json && mv temp.json package.json

      - name: Substitute Version in gitwatch.sh
        run: |
          sed -i "s/%%GITWATCH_VERSION%%/${{ steps.get_version.outputs.version_number }}/g" gitwatch.sh

      - name: Update CHANGELOG.md and Extract Notes
        id: update_changelog
        run: |
          TAG_NAME="${{ steps.get_version.outputs.tag_name }}"
          VERSION_NUMBER="${{ steps.get_version.outputs.version_number }}"
          RELEASE_DATE=$(date +'%Y-%m-%d')
          UNRELEASED_HEADER="## [Unreleased]"
          NEW_VERSION_HEADER="## [${VERSION_NUMBER}] - ${RELEASE_DATE}"
          ESCAPED_UNRELEASED_HEADER="## \\[Unreleased\\]" # For sed and awk

          if ! grep -q "^${ESCAPED_UNRELEASED_HEADER}$" CHANGELOG.md; then
            echo "Error: Could not find '${UNRELEASED_HEADER}' section in CHANGELOG.md"
            exit 1
          fi

          # Extract release notes
          awk -v start_header="$ESCAPED_UNRELEASED_HEADER" '
            BEGIN { printing = 0; content = "" }
            $0 == start_header { printing = 1; next }
            printing && /^## \[/ { printing = 0 }
            printing { gsub(/^[ \t]+|[ \t]+$/, ""); if (length($0) > 0) content = content $0 "\\n" }
            END { print content }
          ' CHANGELOG.md > release_notes.txt

          # Replace the [Unreleased] header with the new version header
          sed "s|^${ESCAPED_UNRELEASED_HEADER}$|${NEW_VERSION_HEADER}|" CHANGELOG.md > CHANGELOG.md.tmp && mv CHANGELOG.md.tmp CHANGELOG.md

          if [ ! -s release_notes.txt ]; then
              echo "Warning: Could not extract release notes from CHANGELOG.md"
              echo "No release notes found." > release_notes.txt
          fi

          NOTES=$(cat release_notes.txt)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Substitute Version in gitwatch.sh
        run: |
          VERSION_NUMBER=$(cat VERSION)
          sed -i "s/%%GITWATCH_VERSION%%/${VERSION_NUMBER}/g" gitwatch.sh
          echo "Substituted version ${VERSION_NUMBER} into gitwatch.sh"

      - name: Install Formatting Tools
        run: |
          pip install mdformat mdformat-toc mdformat-gfm mdformat-beautysh
          npm install -g prettier

      - name: Format package.json with Prettier
        run: |
          prettier --write package.json

      - name: Format CHANGELOG.md with mdformat
        run: |
          mdformat CHANGELOG.md

      - name: Commit updated files
        id: commit_files
        run: |
          git add VERSION package.json CHANGELOG.md gitwatch.sh
          if git diff --staged --quiet; then
            echo "No changes to commit."
            echo "committed=false" >> $GITHUB_OUTPUT
          else
            git commit -m "chore: Prepare release ${{ steps.get_version.outputs.tag_name }}"
            echo "committed=true" >> $GITHUB_OUTPUT
          fi

      - name: Push Release Branch
        run: |
          git push origin ${{ steps.get_version.outputs.release_branch }}

      - name: Create and Push Tag
        if: steps.commit_files.outputs.committed == 'true'
        run: |
          git tag ${{ steps.get_version.outputs.tag_name }}
          git push origin ${{ steps.get_version.outputs.tag_name }}

      - name: Create GitHub Release
        if: steps.commit_files.outputs.committed == 'true'
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          name: Release ${{ steps.get_version.outputs.tag_name }}
          body: ${{ steps.update_changelog.outputs.notes }}
          files: |
            gitwatch.sh
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare CHANGELOG.md for next cycle
        run: |
          # Add the [Unreleased] header back
          UNRELEASED_HEADER="## [Unreleased]"
          CHANGELOG_FILE="CHANGELOG.md"
          awk 'NR==3{print "\n## [Unreleased]\n"} {print}' "${CHANGELOG_FILE}" > "${CHANGELOG_FILE}.tmp" && mv "${CHANGELOG_FILE}.tmp" "${CHANGELOG_FILE}"

      - name: Commit 'Unreleased' header to release branch
        run: |
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes detected in CHANGELOG.md after re-add."
          else
            git commit -m "chore: Prepare CHANGELOG.md for next version"
            git push origin ${{ steps.get_version.outputs.release_branch }}
          fi

      - name: Create Pull Request to master
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ steps.get_version.outputs.release_branch }}
          destination_branch: "master"
          pr_title: "Merge release: ${{ steps.get_version.outputs.tag_name }}"
          pr_body: "This PR merges the release preparations for ${{ steps.get_version.outputs.tag_name }} back into master."
          pr_reviewer: "${{ github.actor }}"
          token: ${{ secrets.GITHUB_TOKEN }}
